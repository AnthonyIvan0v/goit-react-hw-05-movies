{"version":3,"file":"static/js/733.15bb2c64.chunk.js","mappings":"8PACA,EAAyB,mCAAzB,EAA8E,4CAA9E,EAA+I,+C,SC0E/I,EA/DyB,WAAO,IAAD,EAC7B,GAA0BA,EAAAA,EAAAA,YAA1B,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAEFE,GAAWC,EAAAA,EAAAA,MAEXC,GAAO,WADIC,EAAAA,EAAAA,MACKC,aAAT,eAAgBF,OAAQ,IAcrC,OAZAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,gHAEMC,EAAAA,EAAAA,IAAaT,GAFnB,OAETU,EAFS,OAGfX,EAASW,GAHM,gDAINC,EAJM,KAINA,SACTC,QAAQC,IAAIF,EAASG,KAAKC,SALX,yDAAH,qDAQhBP,GACD,GAAE,CAACR,KAGF,iCACE,mBAAQgB,UAAWC,EAAeC,QAAS,kBAAMhB,EAASE,EAAf,EAA3C,sBAIA,iBAAKY,UAAWC,EAAhB,WACE,gBACEE,IACE,gDAAkCrB,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAOsB,cAAzC,EAGFC,IAAG,OAAEvB,QAAF,IAAEA,OAAF,EAAEA,EAAOwB,SAEd,iBAAKN,UAAWC,EAAhB,WACE,yBAAU,OAALnB,QAAK,IAALA,OAAA,EAAAA,EAAOwB,SAAP,OAAgBxB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOyB,kBAAvB,OAAyCzB,QAAzC,IAAyCA,OAAzC,EAAyCA,EAAO0B,SACrD,kDAAmB1B,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAO2B,iBAC1B,kDAAmB3B,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAO4B,iBAC1B,wCACA,8BAAI5B,QAAJ,IAAIA,OAAJ,EAAIA,EAAO6B,YACX,qCAEQ,OAAL7B,QAAK,IAALA,OAAA,EAAAA,EAAO8B,UAAP,OACC9B,QADD,IACCA,OADD,EACCA,EAAO8B,OAAOC,KAAI,gBAAG7B,EAAH,EAAGA,GAAIwB,EAAP,EAAOA,KAAP,OAChB,gCAAiBA,EAAjB,OAAWxB,EADK,eAO1B,2BACE,SAAC,KAAD,CAAM8B,GAAG,OAAOxB,MAAO,CAAEF,KAAAA,GAAzB,UACE,mCAEF,SAAC,KAAD,CAAM0B,GAAG,UAAUxB,MAAO,CAAEF,KAAAA,GAA5B,UACE,sCAEF,SAAC,KAAD,CAAQ2B,QAAS/B,SAIxB,C,+LCvEKgC,EAAU,mCAGVC,EAAWC,EAAAA,EAAAA,OAAa,CAC5BC,QAHc,gCAIdC,OAAQ,CACNC,IAAKL,KAcIM,EAAW,mCAAG,sGACFL,EAASM,IAAT,qCAA2CP,IADzC,uBACjBlB,EADiB,EACjBA,KADiB,kBAElBA,EAAK0B,SAFa,2CAAH,qDAKX/B,EAAY,mCAAG,WAAMT,GAAN,yFACHiC,EAASM,IAAT,iBAAuBvC,EAAvB,oBAAqCgC,IADlC,uBAClBlB,EADkB,EAClBA,KADkB,kBAGnBA,GAHmB,2CAAH,sDAMZ2B,EAAe,mCAAG,WAAMzC,GAAN,yFACNiC,EAASM,IAAT,iBACXvC,EADW,4BACWgC,IAFL,uBACrBlB,EADqB,EACrBA,KADqB,kBAKtBA,GALsB,2CAAH,sDAQf4B,EAAY,mCAAG,WAAMC,GAAN,yFACHV,EAASM,IAAT,gCACIP,EADJ,iCACoCW,EADpC,yBADG,uBAClB7B,EADkB,EAClBA,KADkB,kBAInBA,EAAK0B,SAJc,2CAAH,sDAOZI,EAAe,mCAAG,WAAM5C,GAAN,yFACNiC,EAASM,IAAT,iBACXvC,EADW,4BACWgC,IAFL,uBACrBlB,EADqB,EACrBA,KADqB,kBAKtBA,GALsB,2CAAH,qD","sources":["webpack://react-homework-template/./src/pages/MovieDetailsPage/movie-details-page.module.css?2076","pages/MovieDetailsPage/MovieDetailsPage.jsx","services/movies-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"movie-details-page_button__bOgoc\",\"wrapperMainInfo\":\"movie-details-page_wrapperMainInfo__JOBXk\",\"wrapperTextContent\":\"movie-details-page_wrapperTextContent__PecEk\"};","import { useState, useEffect } from 'react';\nimport {\n  Link,\n  Outlet,\n  useParams,\n  useNavigate,\n  useLocation,\n} from 'react-router-dom';\nimport { getMovieById } from 'services/movies-api';\n\nimport styles from './movie-details-page.module.css';\n\nconst MovieDetailsPage = () => {\n  const [movie, setMovie] = useState();\n  const { id } = useParams(); //повертається об'єкт в якому ключем є те що було написона через двокрампку в адресі стало ключем а реальне значення чке написано стало значинням ключа\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const from = location.state?.from || '/';\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        const result = await getMovieById(id);\n        setMovie(result);\n      } catch ({ responce }) {\n        console.log(responce.data.message);\n      }\n    };\n    fetchMovie();\n  }, [id]);\n\n  return (\n    <>\n      <button className={styles.button} onClick={() => navigate(from)}>\n        Go back\n      </button>\n\n      <div className={styles.wrapperMainInfo}>\n        <img\n          src={\n            `https://image.tmdb.org/t/p/w500${movie?.poster_path}` ||\n            movie?.backdrop_path\n          }\n          alt={movie?.title}\n        />\n        <div className={styles.wrapperTextContent}>\n          <h2>{movie?.title || movie?.original_title || movie?.name}</h2>\n          <p>Release data : {movie?.release_date}</p>\n          <p>Vote average : {movie?.vote_average}</p>\n          <p>Overview : </p>\n          <p>{movie?.overview}</p>\n          <p>\n            Genres :\n            {movie?.genres &&\n              movie?.genres.map(({ id, name }) => (\n                <span key={id}> {name}, </span>\n              ))}\n          </p>\n        </div>\n      </div>\n\n      <ul>\n        <Link to=\"cast\" state={{ from }}>\n          <p>Cast</p>\n        </Link>\n        <Link to=\"reviews\" state={{ from }}>\n          <p>Reviews</p>\n        </Link>\n        <Outlet context={id} />\n      </ul>\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n","import axios from 'axios';\n\nconst API_KEY = 'b936dbeb2c24233fe8478f46d56a734f';\nconst BaseURL = 'https://api.themoviedb.org/3/';\n\nconst instance = axios.create({\n  baseURL: BaseURL,\n  params: {\n    key: API_KEY,\n  },\n});\n\nexport const searchFilms = async (q, _page = 1) => {\n  const { data } = await instance.get('/', {\n    params: {\n      q,\n      _page,\n    },\n  });\n  return data;\n};\n\nexport const getTrending = async () => {\n  const { data } = await instance.get(`/trending/all/week?api_key=${API_KEY}`);\n  return data.results;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}?api_key=${API_KEY}`);\n\n  return data;\n};\n\nexport const getMovieCredits = async id => {\n  const { data } = await instance.get(\n    `/movie/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const searchMovies = async query => {\n  const { data } = await instance.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&include_adult=false`\n  );\n  return data.results;\n};\n\nexport const getMovieReviews = async id => {\n  const { data } = await instance.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n"],"names":["useState","movie","setMovie","id","useParams","navigate","useNavigate","from","useLocation","state","useEffect","fetchMovie","getMovieById","result","responce","console","log","data","message","className","styles","onClick","src","poster_path","alt","title","original_title","name","release_date","vote_average","overview","genres","map","to","context","API_KEY","instance","axios","baseURL","params","key","getTrending","get","results","getMovieCredits","searchMovies","query","getMovieReviews"],"sourceRoot":""}